  Unite 1:Introduction-Q.1	What do you mean by software?Ans:	A software system or software is:(i)	Instructions/Computer programs that when executed provide desired function & performance.(ii)	Data structures that enable the programs to adequately manipulate information.(iii)	Documents that describe the operation and use of the programs.We can say that a software system consists of a number of separate programs, configuration files, which are used to setup these programs, system documentation, which describes the structure of the system & user documentation which explains how to use the system & website for users to download recent product information.Q.2	What are the characteristics of Software?Ans:	For a better understanding about the software and hence software engineering, the characteristics of the software are required to be discussed. Since, software is a logical system (whereas, hardware is a physical system), its characteristics are different from hardware:1.	Software is developed or engineered; it is not manufactured in the classical sense.2.	Software doesn‟t “wear out”.3.	Most of the software continues to be custom built or customizable.Q.3	Compare software development and hardware manufacture?Ans:	Similarities between software development & hardware manufacture:High quality is achieved through good designBoth activities depend on people and their requirements.Dissimilarities between software development & hardware manufacture:The manufacturing phase of hardware can have quality problems which couldn‟t be rectified as easily as in software development phase.Though both activities depend on people, but the relationship between the people applied and work accomplished is entirely different. As for hardware manufacturing market survey and competitors policies are to be considered on priority, whereas software development concentrates more on the user requirements.Both activities target for a product as a result, but the approaches followed are entirely different. (As there are SDLC set of phases for software development, whereas the product manufacturing involves different phases like consumer tendency, market analysis etc.)Cost of manufacturing a hardware product could be estimated exactly & easily, whereas it‟s comparatively difficult to estimate exactly in case of software development.Software doesn‟t “Wear out”. The relationship of failure rate with time for a hardware is like a “bathtub curve” As shown in Fig 1.1Fig 1.1 Failure curve for hardwareThis curve shows that hardware show high rate of failure in it‟s early stage due to design or manufacturing defects, when there defects are corrected, the failure rate deeps i.e. very low & steady for a period of time. But as the time passes, due to environmental effects like temperature, dust, moisture, the hardware begins to wear out. In a broader way, as comparing software with hardware, we can say that the software doesn‟t wear out due to environmental conditions (as in case of hardware). Theoretically the failure rate v/s time curve for software is an ideal curve as shown in figure 1.2Here in the initial cycle of a software, undiscovered defects cause high failure rates, but if they are corrected (i.e. made errorfree), the curve becomes flat & ideal with very less failure rate. This shows that software doesn‟t wear out, but the fact is that, it deteriorates by the attack of malicious software (virus, Trojan horse etc.) and also by time the user‟s demands changes and updations are required which leads to further changes & modifications causing to increase in failure rates as shown in figure 1.3.Figure 1.3 Actual curve for Software 7	Software EngineeringThe software industry is moving towards component based assembly. Most of the software continues to be customer built. As in case of hardware, we have well defined set of IC or chips (Integrated) and screws and other components and that could be used to design different hardware (reusability of hardware components). In case of software, library routines & subroutines are to be developed for reusability. A software component should be designed & implemented so that is can be reused in many other different programs.Q.4	What are Software Myths?Ans: Most, knowledgeable professionals have recognized myths or beliefs (untrue beliefs or explanations) which are misguiding the attitudes (of the users) causing serious problems for managers & technical persons. Different types of Myths relevant to the software are as classified in figure 1.4.management Myths:Myth 1:We have all the standards & procedures available for building software i.e the software developer have everything what is reqd.Reality:-	Software practitioners are not aware about the existence of all those standards.-	Those practices might be outdated or not according to the current /modern software engineering practices.-	Also all the pre-existing procedures, are not complete.Myth 2:The Addition of latest hardware systems would improve the software development.Reality:-	The role of latest hardware is not too high for the quality software development; instead (CASE) Computer aided software engineering tools are more important than hardware for a good & quality productivity.-	Also the available hardware resources are not used effectively.Management thinks that, addition of more people and programmers in software development could help in meeting the deadlines of the project (If it is lagging behind)-	Software development is not, a mechanistic process like manufacturing; here addition of people in late phases may reduce the amount of time to be used for the productive development, as the newcomers would take time of existing developers for the explanations & understanding for the project. But, addition of people done in a planned & well-coordinated manner could be helpful in the project completion.(ii)Customer Myths:Customer could be the direct users of the software, a technical group, marketing /sales department, or some other company. The customer possesses the myths which lead to the false expectations (by the customer) & hence create dissatisfaction with the developer.Myth 1:A general statement of objectives is sufficient to begin writing programs (software development) and the details of the objectives could be done later.Reality:A formal & detailed description of the information domain function, behaviors performance, interfaces, design constraints and validation criteria is essential. A thorough communication between customer & developer is must.Myth 2:Project requirement continually change, but, change, can be easily accommodated due to the flexible nature of the software.Reality:Changes are made till the last phases of the software development but the cost of making those changes increase with the later stages of development. A detailed analysis of user requirements should be done to minimize the change requirement. Fig 1.5 shows the cost of change with respect to the phases of development.9	Software EngineeringFigure: 1.5 Cost of change(iii)Practitioner’s Myths:Myths 1:They believe that their job is completed with the program writing & get it worked.Reality:It‟s a reality that 60-80% of all the efforts go in the maintenance phase (as after the release) of the software. The efforts are required, when the product is delivered first time to the customer.Myths 2:There is no (other) way of accessing the quality of the program, after it is being made to run.Reality:The formal technical review of the project is an effective software quality assurance mechanism. These reviews are the quality filters and more approachable than the testing.Myth 3:The working program is the only deliverable work product for a successful project.Reality:The working program is not only sufficient, instead proper documents manuals and handouts are also reqd. to be supplied for the guidance & software support.Myth4:Software Engineering will make us create voluminous & unnecessary document & invariably slow us down.Reality: Software Engineering is not about creating documents, instead it is there for creating quality and better quality leads to the reduced rework & this reads to a faster delivery of the product.Q.5	What are various Software Applications?Ans: Software may be applied in any situation for which a specified set of procedural steps (i.e. an algorithm) has been defined. Information content & determinacy are important factors in determining the nature of a software application.Following are the categories of the software with their corresponding applications.1.	System Software: It is a collection of programs written to save other programs eg. Compliers, Editor, File Management utilities, Operating System. These are characterized by heavy interaction with computer hardware and heavy usage by multiple users.2.	Real Time Software: Software that monitors and analyzes the real world problems and meets strictly the timelines in execution.3.	Business Software: System like payroll accounts receivable/payable, inventory, MIS software for providing information are included in business software.4.	Engineering & Scientific software: Applications used specifically for engineering, research, simulation automated manufacturing etc. are included in such software.5.	Embedded Software: Artificial Intelligence based (home applications) intelligent systems like keypad or microwave oven, automated washing machines etc.6.	Personal computer Software: Used mainly for entertainment (like media players), word processing, spreadsheets , graphics etc.7.	Web based software: These mainly incorporate the instructions based on CGI, HTML, PERL etc.8.	Artificial Intelligence Software: To solve complex specific problems eg: expert system, knowledge-based systems, pattern recognition etc.11	Software EngineeringQ.6	Define Software Engineering.Ans: Software Engineering (SE) is the establishment & use of sound engineering principles in order to obtain economic, reliable and efficient software. Software Engineering is the application of a systematic, disciplined, quantifiable approach to the development, operation & maintenance of software. Software Engineering is layered technology as shown in Figure 1.6.Figure 1.4 SE layersSoftware Process Models-Q.1	Explain software process.Ans:	The software process can be shown as in Fig 2.1:Figure: 2.1 Software ProcessA Common Process Framework is established by defining a small number of framework activities that are applicable to all software projects, regardless of their size or complexity. Task sets are the collection of software engineering work tasks, project mile stones, work products & quality assurance points. Umbrella activities majorly includes software quality assurance, software configuration mgmt. & measurement, these activities are independent of any other framework activity & occur throughout the process.Q.2	What is the basic structure of software development process?Ans: A software development process model is an abstract representation of a software Process or is a brief overview of the software process. Basic structure of the software development process is shown in Fig 2.2.Figure: 2.2 Basic Structure of the Software Development ProcessThe process development is similar to SDLC.Q.3	What are the different categories of process models?Ans: There are many process models which are used in different areas. The waterfall model & the evolutionary models are commonly used for the practical development. The other models are used in the specific fields. The model categorization is shoFigure: 2.3 Process Models CategoriesQ.4	Explain Waterfall model / linear Sequential Model.Ans:	Waterfall model is:	The simplest oldest process model	Best suited where requirements can be clearly defined.	Steps of development are followed consecutively	Each step involves detailed activities	Each step produces an output which becomes the input of the next step.Major phases/steps of the waterfall model are shown in fig 2.Figure: 2.4 Waterfall ModelPhase1-Concept formationThis phase includes-(a)	Problem definition: Tells the requirements of the user. Project goals, scope & resource limits are identified.(b)	Feasibility Study: Provides one or more conceptual solution. Solutionsmust be proved feasible & a preferred sol must be accepted.-	User requirements-	Proposed solution-	Project goals & scope-	Terms, condition & restrictions-	Tentative dates of project start & completionPhase: 2 Developing the software specificationA Detail analysis model with high-level description of requirements is producedOutputs:-	Requirements Analysis Model-	Revise to project goals & cost Benefit Estimates-	A SRS (Software Requirement Specification)-	A project development plan-	A Test plan(a)	Preliminary : Main Architecture is proposed(b)	Detailed: Detailed database & program modules and procedures aredesigned & documented.-	Detailed User Procedures-	User Manual-	SDS ( Software Design Specification)Phase: 4 Coding & Unit Testing-	Programs are written in specific programming language (as mentioned in SRS)-	Individual components are tested-	A Test Document-	Tested ModulesPhase: 5 Software Integration & TestingFigure: 2.5 Testing ProcedureOutput:A complete integrated & tested software for the user.Phase: 6 Implementation & Maintenance :Software is installed at user location & if any deficiencies or errors are found, they are removed. If the changes are not minor, then requirements of a new system arise.Model Summary :-	It is a step –by-step approach-	Each step should be well-defined-	Each step creates a definite product-	Product generated from each phase becomes the basics for the next step.-	Verification & validation of each step can be done followed by certification-	Clear demonstration between end & beginning of a phase.-	The outputs is work product obtained as: SRS(Software Requirement specification) , SDS (Software Design Specification) , project plan , test plan, and code.Advantages-	Model has well-defined steps with well-defined outputs.-	It recognizes the sequence of software engineering activities.Disadvantages-	Because of greater wait, this model not in much use.-	Not easy to find all requirements at the beginning stage.-	Greater customer patience is required.-	Less interaction of software developers & users-	Inflexible in nature, as phases are assumed as compartmentalized activities.Q.5	Explain Prototype Model/Rapid Prototype Model.Ans:	Prototype Model is also called as Rapid Prototype model.-	It removes the limitation of the waterfall model.-	A Basic model or prototype is developed before the actual model.-	It is built very rapidly & fast, so that it can be checked time to time by the customer.Fig 2.6 shows the phases of prototype model.Figure: 2.6	Prototype Model.Phase 1: Listen to Customers-	All requirements of the user are discussed & identified-	Goals are set-	An agreement document-	List of all requirementsPhase 2: Build the Model-	Model is quickly designed according to user‟s requirementsOutput:-	A Prototype for the customer is ready.Phase 3: Customer Evaluation-	System is evaluated & tested by customerOutput:-	Feedback from customer to developer-	User satisfaction or acceptancePrototyping is a practice of building a version of software quickly in advance. This model is built at the early stages of the software development. Fig 2.7 shows the process of prototypingFigure: 2.7 Process of prototypingAdvantages of prototype model:-	Clear identification of requirements by developer-	Loop holes or drawbacks are indentified-	Faster system development-	Development & maintenance effort are reducedDisadvantage of Prototype Model:-	Use of an inappropriate programming language due to quick building which later difficult or may be forgot by the developer to replace.-	Customer may visualize lack of good quality in a quickly built modelQ.6:	Explain RAD Model/Rapid Application Development Model.Ans:	RAD model is also a speedy method of model development.-	Rapid Application development methodology is built with the time constraint of 2 to 3 months (for all components or functions)-	This model is an incremental model combining waterfall model with component based development model. He can also be said as modified version of waterfall model.-	Its development time is less including the use of reusable components.-	It is a high speed and fast processing model.-	It is majorly used in business oriented applications-	Here different & independent RAD frames are responsible for different modules and at last all the developed functions are integrated to form a complete system. Five phases of this model are shown in fig 2.8.Figure: 2.8 RAD ModelPhases of RAD ModelPhase 1 Business Modeling (BM):Information flow is defined & described with the description of source & destination of the informatinPhase 2 Data modeli (DM): Here the information flow is refined. For this, the information flow is partitioned into different data objects (having their own attributes). The relationship & connectivity is established between these data objects.Phase 3 Process Modeling (PM): Data objects are combined to provide the information flow of each business function. Documents & reports are prepared related to the date manipulation of the date objects.Phase 4 Application Generation (AG): Product is build will the help of new components & the already exiting components. The now built new components also serve as the receivable components for future purpose.Phase 5 Testing & Turnover:Unit testing is done for new added components as older components are already tested. After that integrated system is tested and the system is found satisfactory as per the user‟s requirements, delivered to the user or customer.Advantages of RAD Model:o	Good for business- oriented applicationoLess time is required for developmentoIndependent transaction for separate modulesDisadvantages of RAD Model:o	Time bounds or constraints should be met, otherwise useless for particular business requirements.o	Not suitable for all types of applicationso	Sufficient manpower requirement for separate RAD teamso	Risk handling is absent in this development. Therefore, RAD Model is not suitable for the applications where the technical risk is higho	High interoperability between new & old technologies is requiredQ.7	Explain Evolutionary Process ModelAns:	Evolutionary Process models are of four types:1.	Incremental2.	Spiral3.	WINWIN Spiral4.	Concurrent development model23	Software Engineering-	Evolutionary model expands the development stages in an incremental manner i.e. all the phases are developed one-by-one to incorporate all the well understood requirements.-	Evolutionary models are iterative in nature-	They are meant to develop increasingly more complete versions of the software-	It basically combines waterfall & prototype modelAn evolutionary process model can be described as shown in Fig 2.8.Figure: 2.8 Phases of Evolutionary Process ModelQ.8	Explain Incremental ModelAns:	Incremental model is:-Introduced by “Mills”-Combination of linear sequential & prototype model-Each increment or interaction adds some functional capability to the software until the full software is implemented. The incremental model is shown in fig. 2.9.Figure: 2.9 Incremental Model-	With the release of each increment, experience is gained by developer as well as user.-	User can delay his decisions until he don‟t experiences the software.-	In the initial stages, user specifies his important & well known requirement. The release of first increment is also known as core product. This product is practically used & tested by the user for further clarification of their requirements. This addition of new requirements helps in building of the next increment with more capabilities. This process continues in the iteration mode until the nth iteration completes .At this stage the complete software is developed.Advantage of Incremental Model-	Less Human resources are required at the beginning and as the number of increment increases, more members can be added to the project-	Resource management could be done efficiently as if a resource which is felt to be included in an increment, if not available could be added in later increments.-	Regular and progressive evaluation of the new increments one after another (by the customer)-	User‟s customer gains experience & knowledge about the product with the release of increments.-	Lesser Project failure risk as a product accompanied with constant exposure to the user satisfaction & evaluation is revised with every increment.Disadvantages of Incremental model-	Size of the increment should be optimum, otherwise small size could be a time consuming development and large one could be too complex.-	Categorization of best & most important requirements by the customers is difficult.Ques.9: Explain Spiral ModelAns: Spiral Model was introduced by “ Boehm”. It is:-	Combination of controlled & systematic aspects of linear sequential & prototype model.-	Introduction of an important phase i.e. phase of risk analysis-	This model is represented in the form of spirals where each spiral represents the various phases of the development. The basic structure of the spiral model is shown in fig 2.10.Figure 2.10: Spiral ModelA spiral model consists of four loops:The process begins at the center of the spiral in clockwise direction.-	The first loop represents the system product concept.-	The second loop represents the development-	The third loop represents the testing-	The fourth loop represents the maintenanceProduct concept:- Includes feasibility study & produces product specificationProduct development:- Includes software buildingProduct testing:- Includes testing of the productProduct Maintenance:- Includes the maintenance of the product where the changes can be done in the controlled mannerA spiral model is portioned into 6 regions :Region1. Customer Communication: - It is required to establish effective communication between software developer & customer.Region2. Planning: - It is required to define resources, timelines and other projects related information.Region3. Risk Analysis:- It is required to asses both technical & management risks.Region4. Engineering: - It is required to build one or more presentations of the application and the best one is selected.Region5. Construction & delivery: - It is required to construct, test, install and provide user support like user manuals and training.Region6. Customer Evaluation: It is required to obtain customer feedback and evaluation of the software representation.Advantages of the Spiral Model-	Software remains active throughout its life-	Software in maintainable-	Realistic Approach-	Reduced RiskDisadvantage of Spiral Model-	It is difficult to satisfy the customer during evolution-	Risk analyst is required-	Slow development-	High monetary cost-	Requires more efforts for implementationQ.10	What is Concurrent developmental model?Ans:	This is also known as Concurrent Engineering model.-	Here all activities of development are done simultaneously in parallel.-	For each activity, a state transition diagram is made, where all events of an activity are shown as states & there should be transitions between them.-	Provides an accurate idea about the states of the project.Q.11:  What is DOD model?Ans: DOD Model is Department of Defense Model. It is based on the waterfall model. The DOD model is shown in Fig. 2.11.Figure: 2.11 DOD Model-	The Main concept in DOD Model is that many of the phases are divided into its sub phases, so that all the phase work can be performed adequately & efficiently .Also a review at the end of each phase is conducted to evaluate the work done previously.-	Here, System design is kept as the primary phase of this model-	Software design phase is divided into preliminary software design phase & detailed software design-	The integration & test phase is considered separately for software & system.Advantage of DOD:-	Well documented-	Satisfaction of requirements-	Elaborated process activitiesDisadvantages of DOD:-	No user involvement-	Expensive-	No iteration-	Improper for development of expert systemQ.12:  What is NASA model?Ans:	NASA Model is also known as NASA SALC (NASA Software Acquisition Life Cycle)-	Has well developed development life cycle-	Used for layer scale systems-	Structure similar to waterfall modelProject ManagementQ.1	What is Software Project Management?Ans: Software project management is the mean by which an orderly control process can be imposed on the software development process to ensure software quality along with the monitoring of the process and then controlling the wrong activities. Software project management is a crucial difficult task in case where (i) software execution is late (ii) over budget (iii) software fails to meet the user requirements.Q.2	What are the basic project management process activities?Ans:	The basic project management process activities are:1-	Proposal Writing2-	Project Planning & scheduling3-	Project Costing4-	Project monitoring & reviews5-	Personal Selection & Evaluation6-	Report Writing & Presentations7-	Quality Management8-	Configuration Management1-	Proposal Writing:It includes:-	Description of main objectives of the project-	How the objectives will be carried out and fulfilled-	Cost & schedule estimates2-	Project Planning & Scheduling:Planning includes:-	Identification of activities-	Milestones (reports ,manual) for the management-	Deliverables for the customerProject scheduling includes:-	Division of project into separate activities-	Time Judgment for completion of each activity3-	Project Costing :It Includes:-	Estimation of the total cost of the projects4-	Project Monitoring & Reviews :Monitoring is a continuing activity and includes:-	The progress of the project is compared regularly with the planned time schedule & costing (could be done with daily informal discussions or formal meetingsReview includes:-	The review of overall progress of the technical development of the project is done regularly.5-	Personal Selection Evaluation :It includes:-	Selection of skilled & experienced staff for the project-	Regular evaluation of the performance of staff.-	Inexperienced staff may be trained.6-	Report writing Presentation :-	Report of project is briefly documented to present before the client &contractor.7-	Quality ManagementIt includes:-	Quality Assurance-	Quality planning-	Quality controlConfiguration is a set of activities designed to control change by identifying the work products that are likely to change, establishing relationships among them, defining mechanisms for managing different version of these products, controlling & the changes imposed auditing & reporting on the changes made. It includes:-	Identification of the work products.-	Managing the products & controlling, auditing, reporting the changes.Q.3	What are the four P’s of SPM?Ans:	Four “p” of Software project Management are:-	People: The People Factor is so important that Software Engineering institution has developed a People Management Capability Maturity Model. (PM-CMM). PM-CMM Defines the key practice areas for Software People in: Recruiting, Selection, Performance Management, Training, Compensation, career Development, Organization and work Design, Team Culture Development.-	Product: Objectives & scope of the required product should be established-	Process: A Software process provides the framework of development-	Project: Conduction of planned & controlled software project management is required to manage complexityQ.4	What is Project Planning?Ans: Project planning is included with in the project management activities. It involves reviewing datelines and use of the project completion schedules like Gantt Charts. These schedules help to plan and report for the project progress.The inputs of the project planning phase: Project Charter and the Concept Proposal.The outputs of the Project Planning phase: Project Requirements, the Project Schedule, and the Project Management PlanProject planning includes the following steps:1.	Definition of project scope2.	Determination of appropriate methods for completing the project3.	Formation of Work Breakdown Structure (WBS) including various tasks and their duration.4.	Designing of activity network diagram to define the logical dependencies between tasks and identification of the critical path. Float/slack time in the schedule can be calculated using project management software.[5.	Estimation of total project cost by estimating necessary resources with cost for each activityQ. 5	What is a project plan?Ans: The software project plan is a relatively brief document that is addressed to a diverse audience.This document majorly includes:-	Communication scope-	Resources, staffing, and customer description-	Definition of risks and risk management techniques-	Definition of cost and schedule for management review-	Provide an overall approach to software development-	Outline for techniques to ensure quality -Process of change managementQ.6	What is Software project scheduling?Ans: Software project scheduling is an activity that distributes estimated effort across the planned project duration by allocating the effort to specific software engineering tasks. Here, an outlined schedule is developed. And then, a detailed schedule is redefined for each entry in the macroscopic schedule.Basic tasks and principles for software project scheduling are:-	Division of tasks or Compartmentalization-	Identification of Interdependency-	Time allocation-	Effort allocation & validation-	Defined responsibilities,-	Defined outcomes & milestonesQ.7	What are the methods of Project Scheduling?Ans:	Two project scheduling methods:-	Program Evaluation and Review Technique (PERT)-	Critical Path Method (CPM)Both methods are driven by information developed in earlier project planning activities and include:-	Estimates of effort-	A decomposition of product function-	The selection of the appropriate process model-	The selection of project type and task setSoftware Metrics and MeasuresQ.1	What do you mean by Software Metrics and Measures?Ans: Metrics provide the scale for quantifying qualities. For example, in software project the length is seen in terms of size metric of Software, then the unit of measurement of size is LOC (Line of Code).Metrics provide a quantification of some property, whereas measurements provide the, actual value for the metrics. Software metric is a measure of some property of a piece of software or its specification.Types of Metrics:Indirect Metric: If metric can‟t be measured directly eg: Reliability of the software, that is estimated from other possible measurements. Direct Metric: Metric that can be measured directly eg: SizeOne way of CatFigure 7.1 Categories of MetricsAnother way of Categorization of Software Metric-	Size-oriented Metrics-	Function-Oriented Metrics-	Human-Oriented Metrics-	Productivity Metrics-	Quality Metrics-	Technical MetricsQ.2	What are process Metrics ?Ans: Process metrics are used to check the progress of project development. These metrics leads to Software process improvement the steps of the software process improvement are as follows:1-	Specific attributes of process are measured2-	This results in the development of various metrics3-	Execution of these metrics will provide indicators4-	These indicators will improve the processEg: - Software measured in terms of reliability if it does not give satisfactory results, then improvement in this part is required.Q.3	What is Project metric?Ans:	Project metrics are used by the project manager and a software team to check the project progress and the activities related to the project. Data from past projects are used to collect the various metrics (Time and Cost) then these metric and their estimates act as the base of the new software. As the project proceeds, the project manager will check its progress regularly time to time and compare the effort, time cost, with the estimated ones.Q.4	What do you mean by Measuring Software and Measurement?Ans: In the field of Engineering, it is easy to measure the power consumption, but in software development measure it is difficult to find that what to measure & how to evaluate measurements. As we know that Software measurement is required for the following reasons:-	To indicate the quality of the product-	To assess the productivity of the people who produce the product.-	To assess the advantage like productivity & quality derived from new software engineering methods & tools.-	To form a baseline for estimation-	To justify requests for new tools or additional traiCategorization of MeasurementDirect Measures: Direct measures are the one which are measured directly from the software project itself. Eg: lines of code (LOC), memory size, execution speed.Indirect Measures: These measures are not measured directly Eg: complexity reliability , maintainability.Q.5	What are the various empirical estimation models.Ans: An empirical estimation model for a software is used to predict effort as a function of Lines of Code (LOC) or Function Point (FP). “Basili” has described four types of resource Models:1-	Static single –variable models (ex-COCOMO)2-	Static Multivariable models3-	Dynamic Multivariable models4-	Theoretical Models1-	Static Single Variable Model:- The equation for this resource model is:Resource = C1 x (Estimated Characteristic) C2Where, resource= effort/project duration/staff size/pages of documentationC1  and C2 = Constants derived from data collected from past projects& Estimated characteristic = LOC/Efforts/Any Characteristics2- Static multivariable model: These models use the historical data to derive empirical relationship. These model use the equation:Resource = C11e1+ C21e2 +-----------Where, ei = ith software characteristicsC1, C2= Constts.Eg. Of such model is Intermediate COCOMO3- Dynamic Multivariable Model : Resource is defined as a function of time allocating some % of effort to each step in software engineering process.4- Theoretical Model: Putnam is theoretical dynamic multivariable model. “ Result is a resource expenditure curve”.